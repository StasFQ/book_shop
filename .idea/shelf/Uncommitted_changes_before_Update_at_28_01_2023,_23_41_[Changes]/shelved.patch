Index: shop/orders/views.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\nfrom django.shortcuts import get_object_or_404\nfrom django.views.decorators.http import require_POST\n\nfrom . import tasks\nfrom .cart import Cart\nfrom .filters import BookFilter\nfrom django.contrib.auth import authenticate, login\nfrom django.contrib.auth.models import User\nfrom django.shortcuts import render, redirect\nfrom django.urls import reverse_lazy\nfrom django.views import generic\n\nfrom .forms import RegisterForm, CartAddProductForm, Checkout, OrderCreateForm\nfrom .models import Book, OrderItem\n\n\nclass RegisterFormPage(generic.FormView):\n    template_name = 'registration/register.html'\n    form_class = RegisterForm\n    success_url = reverse_lazy('/')\n\n    def form_valid(self, form):\n        user = form.save()\n        user = authenticate(username=user.username, password=form.cleaned_data.get('password1'))\n        login(self.request, user)\n        return super(RegisterFormPage, self).form_valid(form)\n\n\n@require_POST\ndef cart_add(request, book_id):\n    cart = Cart(request)\n    product = get_object_or_404(Book, id=book_id)\n    form = CartAddProductForm(request.POST)\n    if form.is_valid():\n        cd = form.cleaned_data\n        cart.add(product=product,\n                 quantity=cd['quantity'],\n                 update_quantity=cd['update'])\n\n    return redirect('cart_detail')\n\n\ndef cart_detail(request):\n    cart = Cart(request)\n    return render(request, 'shop/detail.html', {'cart': cart})\n\n\ndef search_books(request):\n    books = Book.objects.all()\n    myFilter = BookFilter(request.GET, queryset=books)\n    books = myFilter.qs\n\n    context = {\"books\": books, \"myFilter\": myFilter}\n    return render(request, \"shop/search_book.html\", context)\n\n\ndef book_detail(request, id):\n    book = get_object_or_404(Book, id=id)\n    cart_product_form = CartAddProductForm()\n    return render(request, \"shop/book_detail.html\", {\"book\": book, 'cart_product_form': cart_product_form})\n\n\ndef order_create(request):\n    cart = Cart(request)\n    if request.method == 'POST':\n        form = OrderCreateForm(request.POST)\n        if form.is_valid():\n            order = form.save(commit=False)\n            order.user = request.user\n            order.status = False\n            order.save()\n            for item in cart:\n                OrderItem.objects.create(order=order,\n                                         book=item['product'],\n                                         quantity=item['quantity'])\n            subject = 'Order create'\n            text = 'I create order'\n            email_sender = request.user.email\n            tasks.send_email.delay(subject, text, email_sender)\n            cart.clear()\n            tasks.send_order_to_store.delay(order.id)\n            return render(request, 'shop/order_created.html',\n                          {'order': order})\n    else:\n        form = OrderCreateForm\n    return render(request, 'shop/orders.html',\n                  {'cart': cart, 'form': form})\n\n\ndef checkout(request):\n    form = Checkout()\n    return render(request, 'shop/checkout.html', {'form': form})\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/shop/orders/views.py b/shop/orders/views.py
--- a/shop/orders/views.py	(revision 28d366a2f3f7467c49a0ae42e24c453a1040073f)
+++ b/shop/orders/views.py	(date 1674942069895)
@@ -18,7 +18,7 @@
 class RegisterFormPage(generic.FormView):
     template_name = 'registration/register.html'
     form_class = RegisterForm
-    success_url = reverse_lazy('/')
+    success_url = reverse_lazy('/book_list/')
 
     def form_valid(self, form):
         user = form.save()
Index: shop/shop/settings.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\"\"\"\nDjango settings for shop project.\n\nGenerated by 'django-admin startproject' using Django 4.1.5.\n\nFor more information on this file, see\nhttps://docs.djangoproject.com/en/4.1/topics/settings/\n\nFor the full list of settings and their values, see\nhttps://docs.djangoproject.com/en/4.1/ref/settings/\n\"\"\"\nimport os\nfrom pathlib import Path\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-e8p2tnq$%@bv_k97+rj=d%5c1x#fw!+ir3%$z+)qbjbj$y84#m'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = ['localhost']\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'orders',\n    'django_filters',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'shop.urls'\n\nTEMPLATES = [\n    {\n        \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n        'DIRS': [BASE_DIR / 'templates'],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n                'orders.context_processors.cart',\n            ],\n        },\n    },\n]\n\n\nWSGI_APPLICATION = 'shop.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/4.1/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        \"ENGINE\": os.environ.get(\"SQL_ENGINE\", \"django.db.backends.sqlite3\"),\n        \"NAME\": os.environ.get(\"SQL_DATABASE\", os.path.join(BASE_DIR, \"db.sqlite3\")),\n        \"USER\": os.environ.get(\"SQL_USER\", \"user\"),\n        \"PASSWORD\": os.environ.get(\"SQL_PASSWORD\", \"password\"),\n        'HOST': 'db',\n        'PORT': '5432',\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/4.1/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'Europe/Kyiv'\n\nUSE_I18N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.1/howto/static-files/\n\nSTATIC_URL = 'static/'\n\nCELERY_TIMEZONE = TIME_ZONE\nCELERY_TASK_TRACK_STARTED = True\nCELERY_BROKER_URL = \"amqp://rabbitmq\"\nCELERY_TASK_TIME_LIMIT = 30 * 60\n\n\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n\nCART_SESSION_ID = 'cart'\nLOGIN_REDIRECT_URL = \"/book_list/\"\n\nEMAIL_BACKEND = \"django.core.mail.backends.smtp.EmailBackend\"\nEMAIL_HOST = \"mailhog\"\nEMAIL_PORT = \"1025\"\nEMAIL_HOST_USER = \"\"\nEMAIL_HOST_PASSWORD = \"\"\nEMAIL_USE_SSL = False\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/shop/shop/settings.py b/shop/shop/settings.py
--- a/shop/shop/settings.py	(revision 28d366a2f3f7467c49a0ae42e24c453a1040073f)
+++ b/shop/shop/settings.py	(date 1674942011770)
@@ -20,7 +20,7 @@
 # See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/
 
 # SECURITY WARNING: keep the secret key used in production secret!
-SECRET_KEY = 'django-insecure-e8p2tnq$%@bv_k97+rj=d%5c1x#fw!+ir3%$z+)qbjbj$y84#m'
+SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY', 'django-insecure-h&n=4(o&)_1ok%t3n&8ra@oh#gqien#do*$of^*0$%rf!g=(x_')
 
 # SECURITY WARNING: don't run with debug turned on in production!
 DEBUG = True
Index: store/store/settings.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\"\"\"\nDjango settings for store project.\n\nGenerated by 'django-admin startproject' using Django 4.1.5.\n\nFor more information on this file, see\nhttps://docs.djangoproject.com/en/4.1/topics/settings/\n\nFor the full list of settings and their values, see\nhttps://docs.djangoproject.com/en/4.1/ref/settings/\n\"\"\"\nimport os\nfrom pathlib import Path\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'foo'\n\nDEBUG = True\n\n\nALLOWED_HOSTS = ['storage', 'localhost']\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'storage',\n    'rest_framework',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'store.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'store.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/4.1/ref/settings/#databases\n\nDATABASES = {\n    \"default\": {\n        \"ENGINE\": os.environ.get(\"SQL_ENGINE\", \"django.db.backends.sqlite3\"),\n        \"NAME\": os.environ.get(\"SQL_DATABASE\", os.path.join(BASE_DIR, \"db.sqlite3\")),\n        \"USER\": os.environ.get(\"SQL_USER\", \"user\"),\n        \"PASSWORD\": os.environ.get(\"SQL_PASSWORD\", \"password\"),\n        \"HOST\": os.environ.get(\"SQL_HOST\", \"localhost\"),\n        \"PORT\": os.environ.get(\"SQL_PORT\", \"5432\"),\n    }\n}\n# Password validation\n# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/4.1/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'Europe/Kyiv'\n\nUSE_I18N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.1/howto/static-files/\n\nSTATIC_URL = 'static/'\n\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n\nCSRF_TRUSTED_ORIGINS = ['http://localhost:8001']\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/store/store/settings.py b/store/store/settings.py
--- a/store/store/settings.py	(revision 28d366a2f3f7467c49a0ae42e24c453a1040073f)
+++ b/store/store/settings.py	(date 1674942011785)
@@ -20,7 +20,7 @@
 # See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/
 
 # SECURITY WARNING: keep the secret key used in production secret!
-SECRET_KEY = 'foo'
+SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY', 'django-insecure-h&n=4(o&)_1ok%t3n&7ra@oh#gqien#do*$of^*0$%rf!g=(x_')
 
 DEBUG = True
 
Index: shop/shop/celery.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import os\n\nfrom celery import Celery\nfrom celery.schedules import crontab\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'shop.settings')\n\napp = Celery('celery_hm', broker='amqp://localhost')\n\napp.config_from_object('django.conf:settings', namespace='CELERY')\n\n\napp.autodiscover_tasks()\n\napp.conf.beat_schedule = {\n    'pars-every-odd-hour': {\n        'task': 'orders.tasks.sync_orders',\n        'schedule': crontab()\n    }\n}\n\n\n@app.task(bind=True)\ndef debug_task(self):\n    print(f'Request: {self.request!r}')\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/shop/shop/celery.py b/shop/shop/celery.py
--- a/shop/shop/celery.py	(revision 28d366a2f3f7467c49a0ae42e24c453a1040073f)
+++ b/shop/shop/celery.py	(date 1674941891913)
@@ -15,7 +15,7 @@
 app.conf.beat_schedule = {
     'pars-every-odd-hour': {
         'task': 'orders.tasks.sync_orders',
-        'schedule': crontab()
+        'schedule': crontab(minute=0)
     }
 }
 
